#!/bin/bash
#--------------------------------- Utils
greenColour="\e[0;32m\033[1m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"
endColour="\033[0m\e[0m"

function log_error() {
    printf "[${redColour}✘${endColour}] $@\n"
}

function log_warning() {
    printf "[${yellowColour}⚠${endColour}] $@\n"
}

function log_ok() {
    printf "[${greenColour}✓${endColour}] $@\n"
}

function log_info() {
    printf "[${blueColour}i${endColour}] $@\n"
}

# This function will help standardize running a command
function run_cmd () {
    /bin/bash -c "$1" 2>/dev/null
}

# make dir
function make_DirTool(){
    TOOL_NAME=$1
    TOOL_PATH="$(pwd)/Pentest_${NAME}/${TOOL_NAME}"
    if [ ! -d "${TOOL_PATH}" ]; then
        log_ok "Creating  dir ${TOOL_PATH}/"
        run_cmd "mkdir ${TOOL_PATH}"
    fi
}

function isPackageInstalled() {
    local package=$1
    dpkg -l | grep -q $package
    return $?
}

function init_folder(){
    itsnew=0
    if [ ! -d "Pentest_${NAME}/" ]; then
        log_info "Creating  dir Pentest_${NAME}/"
        run_cmd "mkdir Pentest_${NAME}/"
        itsnew=1
    fi

    if [[ ! -f "Pentest_${NAME}/targets/domains.txt" ]]
    then
        echo -e "${greenColour}[+]${endColour} Creating Pentest_${NAME}/targets/domains.txt"
        run_cmd "touch Pentest_${NAME}/targets/domains.txt"
        itsnew=1
    fi

    if [[ ! -f "Pentest_${NAME}/targets/subdomains.txt" ]]
    then
        echo -e "${greenColour}[+]${endColour} Creating Pentest_${NAME}/targets/subdomains.txt"
        run_cmd "touch Pentest_${NAME}/targets/subdomains.txt"
        itsnew=1
    fi

    if [[ ! -f "Pentest_${NAME}/targets/ipaddresses.txt" ]]
    then
        echo -e "${greenColour}[+]${endColour} Creating Pentest_${NAME}/targets/ipaddresses.txt"
        run_cmd "touch Pentest_${NAME}/targets/ipaddresses.txt"
        itsnew=1
    fi

    if [[ ! -f "Pentest_${NAME}/targets/urls.txt" ]]
    then
        echo -e "${greenColour}[+]${endColour} Creating Pentest_${NAME}/targets/urls.txt"
        run_cmd "touch Pentest_${NAME}/targets/urls.txt"
        itsnew=1
    fi

    run_cmd "chown -R 1000:1000 Pentest_${NAME}/"
    if [ $itsnew -eq 1 ];then
        echo -e "\n${blueColour}[i]${endColour} Please add ${greenColour}Targets${endColour} to the created files to continue"
        read -r -s -p $'Press enter to continue...'
    fi
}

#--------------------------------- Web scan scripts

USERAGENT='"Mozilla/5.0 \(Windows NT 10.0; rv:100.0\) Gecko/20100101 Firefox/100.0"'

## Init analice URL
function analice_URL(){
    URL=$1
    log_info "Analyzing web: ${URL}"
    check_alive $URL
    get_ip $URL
    whatweb_analyce $URL
    ffuf_analyce $URL
    nuclei_analyce $URL
    wapiti_analyce $URL
    testssl_analyce $URL
}

function check_alive(){
    url=$1
    # Check if the URL is active
    curl -Is $url
    if [ $? -eq 0 ]; then
        log_ok "URL is alive"
    else
        log_warning "URL is not alive"
        exit 1;
    fi
}

function get_ip(){
    ip=$(host $url | awk '/has address/ {print $4}' | head -n 1)
    log_info "IP: $ip"
}

function whatweb_analyce(){
    echo -e "${greenColour}\n[*] Whatweb${endColour}"
    url=$1
    host_name=$(echo $url | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
    OPFILE="--log-verbose ${TOOL_PATH}/whatweb_${host_name}"

    COMMAND="whatweb --user-agent ${USERAGENT} -v -a 3 ${OPFILE} ${url}"
    echo -e "${purpleColour}command${endColour}$ ${COMMAND}"
    echo -e "<------------------------------->\n";
    eval $COMMAND
}

function ffuf_analyce(){
    echo -e "${greenColour}\n[*] FFuF ${endColour}"
    url=$1
    host_name=$(echo $url | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
    WORDLIST_PATH="/usr/share/wordlists"
    WORDLIST="-w ${WORDLIST_PATH}/fuzz.txt "
    EXTENSIONS="-e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json"
    RECURSION="-recursion -recursion-depth 2"
    REPLAY_PROXY="-replay-proxy http://127.0.0.1:8080"
    THREADS="-t 10"
    USR="-H 'User-Agent: Mozilla/5.0 \(Windows NT 10.0; rv:100.0\) Gecko/20100101 Firefox/100.0'" 
    OPFILE="-o ${TOOL_PATH}/ffuf_${host_name}.html -of html"

    COMMAND="ffuf -r ${RECURSION} ${REPLAY_PROXY} ${WORDLIST} -ac ${USR} ${THREADS} ${OPFILE} -u ${url}/FUZZ"
    echo -e "${purpleColour}command${endColour}$ ${COMMAND}"
    echo -e "<------------------------------->\n";
    eval $COMMAND

}

function nuclei_analyce(){
    echo -e "${greenColour}\n[*] Nuclei ${endColour}"
    url=$1
    host_name=$(echo $url | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
    USR="-H 'User-Agent: Mozilla/5.0 \(Windows NT 10.0; rv:100.0\) Gecko/20100101 Firefox/100.0'" 
    PROXY="-proxy http://127.0.0.1:8080"
    OPFILE="-output ${TOOL_PATH}/nuclei_${host_name}"

    COMMAND="nuclei -follow-redirects ${USR} ${PROXY} ${OPFILE} -target ${url}"
    echo -e "${purpleColour}command${endColour}$ ${COMMAND}"
    echo -e "<------------------------------->\n";
    eval $COMMAND
}

function testssl_analyce(){
    echo -e "${greenColour}\n[*] testSSL ${endColour}"
    url=$1
    host_name=$(echo $url | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
    OPFILE="--htmlfile ${TOOL_PATH}/testssl_${host_name}.html"

    COMMAND="/opt/testssl/testssl.sh --quiet ${OPFILE} ${url}"
    echo -e "${purpleColour}command${endColour}$ ${COMMAND}"
    echo -e "<------------------------------->\n";
    eval $COMMAND
}

function wapiti_analyce(){
    echo -e "${greenColour}\n[*] Wapiti ${endColour}"
    url=$1
    host_name=$(echo $url | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
    USR="--user-agent ${USERAGENT}" 
    OPFILE="--output ${TOOL_PATH}/wapiti_${host_name}.html"
    PROXY="--proxy http://127.0.0.1:8080"

    COMMAND="wapiti ${USR} ${OPFILE} ${PROXY} --color --url ${url}"
    echo -e "${purpleColour}command${endColour}$ ${COMMAND}"
    echo -e "<------------------------------->\n";
    eval $COMMAND
}

#--------------------------------- Script Init
# Usage 
function usage () {
	log_info "Usage:"
    echo -e "autoWebPentest.sh [-i | -L] <URL|URLs File> -o <output_name>"
    echo -e "\t-u <URL>\t\tFor single URL scan"
    echo -e "\t-L <URLs file>\t\tFor muliples URL in file scan"
    echo -e "\t-o <output_name>\tFor File name Output dir"
    echo -e "\t-h \t\t\tFor Help\n\n"
    echo -e "Made with love by:"
    log_ok "@Fatake"
}

## Checa que tenga parámetros
if [[ ${#} -eq 0 ]]; then
    log_error "Please add the necessary arguments"
    usage;
    exit 1
fi

## Checa que existan los paquetes a ocupar
declare -a packages=("nuclei" "whatweb" "ffuf" "curl")
notinstalled=0;
for package in "${packages[@]}"; do
    if ! command -v $package &> /dev/null; then
        log_error "$package not installed"
        notinstalled=1;
    fi
done

if [[ $notinstalled -eq 1 ]]; then
    exit 1
fi


## Lectura de parámetros 
while getopts :hu:L:o: flag ; do
    case "${flag}" in
        u) url=${OPTARG};;
        L) url_list=${OPTARG};;
        o) output=${OPTARG};;
        h)
			usage
			exit 0;;
        \?)
			log_error "Invalid option:\t -${OPTARG}" 
			usage
			exit 1;;
		:)
			log_error "Option -${OPTARG} requires an argument."
			usage
			exit 1;;
    esac
done

# Verify that only one of -i or -L is used
if [ -n "$url" ] && [ -n "$url_list" ]; then
    log_error "Only one of -i or -L can be used"
    exit 1
fi

if [ -z "$url" ] && [ -z "$url_list" ]; then
    log_error "Either -i or -L is required"
    exit 1
fi

TOOL_PATH=$(pwd)/webPentest_${output}
if [ ! -d "${TOOL_PATH}" ]; then
    log_info "Creating  dir ${TOOL_PATH}"
    run_cmd "mkdir -p ${TOOL_PATH}/"
fi
run_cmd "chown -R 1000:1000 ${TOOL_PATH}/"

if [ -n "$url" ]; then
    log_info "Single URL mode"
    echo "----------------------------"
    analice_URL $url
fi

if [ -n "$url_list" ]; then
    log_info "List of URLs mode"
    echo -e "<------------------------------->\n";
    for t in $(cat $url_list); do
        analice_URL $t
    done;
fi

run_cmd "chown -R 1000:1000 ${TOOL_PATH}/"


